function [ireg_white_noise,ireg_time_vector,reg_white_noise] = ...
    fcn_AVAR_generateIrregularWhiteNoise(power_spectral_density,...
    sampling_frequency,mean_white_noise,number_of_time_steps,...
    upsampling_factor,ireg_time_vector,varargin)
%% fcn_AVAR_generateIrregularWhiteNoise
%   This function generates irregularly sampled white noise characterized 
%   by 'power_spectral_density'. Irregularly sampled data is generated by 
%   randomly down-sampling the regularly-upsampled signal.
%
%   A regularly sampled signal is at a frequency of
%   'upsampling_factor*sampling_frequency'. Later it is downsampled both
%   regularly and irregularly to a frequency of 'sampling_frequency'.
% FORMAT:
%
%   [ireg_white_noise,ireg_time_vector,reg_white_noise] = ...
%       fcn_AVAR_generateIrregularWhiteNoise(power_spectral_density,...
%       sampling_frequency,mean_white_noise,number_of_time_steps,...
%       upsampling_factor,ireg_time_vector)
%
% INPUTS:
%
%   power_spectral_density: Power spectral density of white noise [unit^2 s].
%   sampling_frequency: Expected sampling frequency of the output [Hz].
%   mean_white_noise: Mean of white noise.
%   number_of_time_steps: Desired length of output.
%   upsampling_factor: Factor to upsample the actual white noise.
%   ireg_time_vector: A 'number_of_time_steps x 1' vector of time 
%   corresponding to 'ireg_white_noise'. It can be NaN.
%   varargin: figure number for debugging.
%
% OUTPUTS:
%
%   ireg_white_noise: A 'number_of_time_steps x 1' vector of irregularly 
%   sampled white noise.
%   ireg_time_vector: A 'number_of_time_steps x 1' vector of time 
%   corresponding to 'ireg_white_noise'.
%   reg_white_noise: A 'number_of_time_steps x 1' vector of regularly 
%   sampled white noise.
%
% This function was written on 2021_05_14 by Satya Prasad
% Questions or comments? szm888@psu.edu
%

flag_do_debug = 0; % Flag to plot the results for debugging
flag_check_inputs = 1; % Flag to perform input checking

st = dbstack; %#ok<*UNRCH>
if flag_do_debug
    fprintf(1, 'STARTING function: %s, in file: %s\n', st(1).name, st(1).file);
end

%% Check input arguments
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   _____                   _       
%  |_   _|                 | |      
%    | |  _ __  _ __  _   _| |_ ___ 
%    | | | '_ \| '_ \| | | | __/ __|
%   _| |_| | | | |_) | |_| | |_\__ \
%  |_____|_| |_| .__/ \__,_|\__|___/
%              | |                  
%              |_| 
% See: http://patorjk.com/software/taag/#p=display&f=Big&t=Inputs
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if flag_check_inputs
    % Are there the right number of inputs?
    if 6>nargin || 7<nargin
        error('Incorrect number of input arguments')
    end
    
    % Check input type and domain
    fcn_AVAR_checkInputsToFunctions(power_spectral_density,'positive');
    fcn_AVAR_checkInputsToFunctions(sampling_frequency,'positive');
    fcn_AVAR_checkInputsToFunctions(mean_white_noise,'number');
    fcn_AVAR_checkInputsToFunctions(number_of_time_steps,'positive integer');
    fcn_AVAR_checkInputsToFunctions(upsampling_factor,'positive integer');
    if ~isnan(ireg_time_vector)
        fcn_AVAR_checkInputsToFunctions(ireg_time_vector, 'time vector');
    end
end

if 7 == nargin
    fig_num = varargin{1};
    flag_do_debug = 1;
elseif 1 == flag_do_debug
    fig = figure;
    fig_num = fig.Number;
end

%% Generate irregularly sampled White Noise
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   __  __       _       
%  |  \/  |     (_)      
%  | \  / | __ _ _ _ __  
%  | |\/| |/ _` | | '_ \ 
%  | |  | | (_| | | | | |
%  |_|  |_|\__,_|_|_| |_|
% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Derived parameters
% actual length of white noise generated
actual_number_of_time_steps = upsampling_factor*number_of_time_steps;
% actual frequency at which white noise is generated
actual_frequency     = upsampling_factor*sampling_frequency;
variance_white_noise = power_spectral_density*actual_frequency;
sampling_interval    = 1/actual_frequency;

%% Noise generation: White Noise
white_noise = normrnd(mean_white_noise,sqrt(variance_white_noise),...
                      actual_number_of_time_steps,1); % white noise

if isnan(ireg_time_vector)
    indices_of_irregularly_sampled_data = ...
        sort(randperm(actual_number_of_time_steps-upsampling_factor+1,...
                      number_of_time_steps))';
    % time at which data is sampled
    ireg_time_vector = sampling_interval*...
        (indices_of_irregularly_sampled_data-1);
else
    indices_of_irregularly_sampled_data = ...
        round(actual_frequency*ireg_time_vector)+1;
end
% irregularly sampled white noise
ireg_white_noise = white_noise(indices_of_irregularly_sampled_data);
% regularly sampled white noise
reg_white_noise = white_noise(1:upsampling_factor:actual_number_of_time_steps);

%% Any debugging?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   _____       _                 
%  |  __ \     | |                
%  | |  | | ___| |__  _   _  __ _ 
%  | |  | |/ _ \ '_ \| | | |/ _` |
%  | |__| |  __/ |_) | |_| | (_| |
%  |_____/ \___|_.__/ \__,_|\__, |
%                            __/ |
%                           |___/ 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if flag_do_debug
    figure(fig_num)
    plot(ireg_time_vector,ireg_white_noise)
    grid on
    xlabel('Time [s]')
    ylabel('Measurement')
    title('White Noise')
    
    fprintf(1, 'ENDING function: %s, in file: %s\n\n', st(1).name, st(1).file);
end

end